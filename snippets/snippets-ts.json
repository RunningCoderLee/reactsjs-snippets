{
  "constructorForReactClassComponent": {
    "prefix": "rcns",
    "body": [
      "constructor(props: ${1:Props}) {",
      "\tsuper(props)",
      "",
      "\tthis.state = {",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "The constructor for a React component is called before it is mounted."
  },
  "componentDidMount": {
    "prefix": "cdm",
    "body": ["componentDidMount(): void {", "\t$0", "}"],
    "description": "Invoked immediately after a component is mounted (inserted into the tree). Initialization that requires DOM nodes should go here. If you need to load data from a remote endpoint, this is a good place to instantiate the network request."
  },
  "componentDidUpdate": {
    "prefix": "cdu",
    "body": [
      "componentDidUpdate(prevProps: ${1:Props}, prevState: ${2:State}, snapshot: ${3:any}): void {",
      "\t$0",
      "}"
    ],
    "description": "Invoked immediately after updating occurs. This method is not called for the initial render."
  },
  "componentDidCatch": {
    "prefix": "cdc",
    "body": ["componentDidCatch(error: Error, info: ErrorInfo): void {", "\t$0", "}"],
    "description": "Invoked after an error has been thrown by a descendant component."
  },
  "componentWillUnmount": {
    "prefix": "cwu",
    "body": ["componentWillUnmount(): void {", "\t$0", "}"],
    "description": "Invoked immediately before a component is unmounted and destroyed. Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, or cleaning up any subscriptions that were created in componentDidMount()"
  },
  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": [
      "shouldComponentUpdate(nextProps: ${1:Props}, nextState: ${2:State}): boolean {",
      "\t$0",
      "}"
    ],
    "description": "Invoked before rendering when new props or state are being received. Defaults to true. This method is not called for the initial render or when forceUpdate() is used."
  },
  "getDerivedStateFromProps": {
    "prefix": "gdsfp",
    "body": [
      "static getDerivedStateFromProps(nextProps: ${1:Props}, prevState: ${2:State}): Partial<${2:State}> | null {",
      "\t$0",
      "}"
    ],
    "description": "Invoked right before calling the render method, both on the initial mount and on subsequent updates. It should return an object to update the state, or null to update nothing."
  },
  "getDerivedStateFromError": {
    "prefix": "gdsfe",
    "body": [
      "static getDerivedStateFromError(error: ${1:any}): Partial<${2:State}> {",
      "\t$0",
      "}"
    ],
    "description": "Invoked after an error has been thrown by a descendant component. It receives the error that was thrown as a parameter and should return a value to update state."
  },
  "getSnapshotBeforeUpdate": {
    "prefix": "gsbu",
    "body": [
      "getSnapshotBeforeUpdate(prevProps: Readonly<${1:Props}>, prevState: Readonly<${2:State}>): ${3:SnapShot} | null {",
      "\t$0",
      "}"
    ],
    "description": "Invoked right before the most recently rendered output is committed to e.g. the DOM. It enables your component to capture some information from the DOM (e.g. scroll position) before it is potentially changed. Any value returned by this lifecycle will be passed as a parameter to componentDidUpdate()."
  },
  "render": {
    "prefix": "ren",
    "body": ["render(): React.ReactNode {", "\treturn ($0)", "}"]
  },
  "setState": {
    "prefix": "ss",
    "body": ["this.setState({$0})"],
    "description": "Enqueues changes to the component state and tells React that this component and its children need to be re-rendered with the updated state. This is the primary method you use to update the user interface in response to event handlers and server responses."
  },
  "setStateWithUpdater": {
    "prefix": "ssu",
    "body": ["this.setState((state${1:, props}) => {", "\treturn {${0:stateChange}}", "})"],
    "description": "Enqueues changes to the component state and tells React that this component and its children need to be re-rendered with the updated state. This is the primary method you use to update the user interface in response to event handlers and server responses."
  },
  "ComponentDefaultProps": {
    "prefix": "cdp",
    "body": ["${1:Component}.defaultProps = {", "\t$0", "}"],
    "description": "Set the default props for the class"
  },
  "ComponentProps": {
    "prefix": "thp",
    "body": "this.props.$0",
    "description": "Access component's props"
  },
  "ComponentState": {
    "prefix": "ths",
    "body": "this.state.$0",
    "description": "Access component's state"
  },
  "CreateRefs": {
    "prefix": "cref",
    "body": "this.${1:name}Ref = React.createRef<${2:Type}>()",
    "description": "Create Refs statement used inside constructor"
  },
  "CreateRefsInFunction": {
    "prefix": "fcref",
    "body": "const ${1:name}Ref = React.createRef<${2:Type}>()",
    "description": "Create Refs statement used inside function component"
  },
  "CreateContext": {
    "prefix": "cct",
    "body": "const ${1:contextName} = React.createContext<${2:Type}>(${3:defaultValue})",
    "description": "Creates a Context object"
  },
  "ContextProvider": {
    "prefix": "ctp",
    "body": ["<${1:Context}.Provider value=\"${2:value}\">", "\t$0", "</${1:Context}.Provider>"],
    "description": "Provider React Component for context object"
  },
  "ContextConsumer": {
    "prefix": "ctc",
    "body": ["<${1:Context}.Consumer>", "\t{${2:value} => ($0)}", "</${1:Context}.Consumer>"],
    "description": "Consumer React Component for context object"
  },
  "ReactClassComponent": {
    "prefix": "rcc",
    "body": [
      "import React, { ${2|PureComponent,Component|}, ReactNode } from 'react'",
      "",
      "interface Props {}",
      "interface State {}",
      "",
      "class ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}} extends $2<Props, State> {",
      "\tconstructor(props: Props) {",
      "\t\tsuper(props)",
      "",
      "\t\tthis.state = {",
      "\t\t\t",
      "\t\t}",
      "\t}",
      "",
      "\trender(): ReactNode {",
      "\t\treturn (",
      "\t\t\t$0",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default $1",
      ""
    ],
    "description": "Create a React Class Component or PureComponent"
  },
  "ReactFunctionalComponent": {
    "prefix": "rfc",
    "body": [
      "import React from 'react'",
      "",
      "interface Props {}",
      "",
      "function ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}(props: Props) {",
      "\tconst {} = props",
      "",
      "\treturn (",
      "\t\t$0",
      "\t)",
      "}",
      "",
      "export default $1",
      ""
    ],
    "description": "Create a React Function Component"
  },
  "ReactFunctionMemoComponent": {
    "prefix": "rfmc",
    "body": [
      "import React, { memo } from 'react'",
      "",
      "interface Props {}",
      "",
      "function ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}(props: Props) {",
      "\tconst {} = props",
      "",
      "\treturn (",
      "\t\t$0",
      "\t)",
      "}",
      "",
      "export default memo($1)",
      ""
    ],
    "description": "Create a React Memo Function Component"
  },
  "ReactClassComponentWithRedux": {
    "prefix": "rccrdx",
    "body": [
      "import React, { ${2|PureComponent,Component|} } from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "interface Props {}",
      "interface State {}",
      "",
      "class ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}} extends $2<Props, State> {",
      "\tconstructor(props) {",
      "\t\tsuper(props)",
      "",
      "\t\tthis.state = {",
      "\t\t\t",
      "\t\t}",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t$0",
      "\t\t)",
      "\t}",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "\t",
      "})",
      "",
      "const mapDispatchToProps = (dispatch) => ({",
      "\t",
      "})",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)($1)",
      ""
    ],
    "description": "Creates a React Class Component with connected redux"
  },
  "ReactFunctionComponentWithRedux": {
    "prefix": "rfcrdx",
    "body": [
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "interface Props {}",
      "",
      "function ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}(props: Props) {",
      "\tconst {} = props",
      "",
      "\treturn (",
      "\t\t$0",
      "\t)",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "\t",
      "})",
      "",
      "const mapDispatchToProps = (dispatch) => ({",
      "\t",
      "})",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)($1)",
      ""
    ],
    "description": "Creates a React Function Component with connected redux"
  },
  "ReactFunctionMemoComponentWithRedux": {
    "prefix": "rfmcrdx",
    "body": [
      "import React, { memo } from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "interface Props {}",
      "",
      "function ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}(props: Props) {",
      "\tconst {} = props",
      "",
      "\treturn (",
      "\t\t$0",
      "\t)",
      "}",
      "",
      "$1.propTypes = {",
      "",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "\t",
      "})",
      "",
      "const mapDispatchToProps = (dispatch) => ({",
      "\t",
      "})",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(memo($1))",
      ""
    ],
    "description": "Creates a memorized React Function Component with connected redux"
  },
  "UseStateHook": {
    "prefix": "rus",
    "body": [
      "const [${1:state}, set${1/(\\w)/${1:/capitalize}/}] = useState${3:<$4>}(${2:defaultValue})$0"
    ],
    "description": "use state hooks"
  },
  "UseEffectHook": {
    "prefix": "rue",
    "body": ["useEffect(() => {", "\t$0", "}${1:, [$2]})"],
    "description": "use effect hooks"
  },
  "UseContextHook": {
    "prefix": "ruc",
    "body": ["const ${2:value} = useContext(${1:MyContext});"],
    "description": "use context hooks"
  },
  "UseReducerHook": {
    "prefix": "rurd",
    "body": [
      "const [${5:state}, ${6:dispatch}] = useReducer(${1:reducer}, ${2:initialStateOrInitializerArg}${3:, ${4:initializer}})"
    ],
    "description": "use reducer hooks"
  },
  "UseCallbackHook": {
    "prefix": "rucb",
    "body": ["const ${1:memorizedCallback} = useCallback(() => {", "\t$0", "}, [$2])"],
    "description": "use callback hooks"
  },
  "UseMemoHook": {
    "prefix": "rum",
    "body": ["const ${1:memorizedValue} = useMemo(() => {", "\t$0", "}, [$2])"],
    "description": "use memo hooks"
  },
  "UseRefHook": {
    "prefix": "ruref",
    "body": ["const ${2:refContainer} = useRef${3:<$4>}(${1:initialValue});"],
    "description": "use ref hooks"
  },
  "UseImperativeHandleHook": {
    "prefix": "ruih",
    "body": ["useImperativeHandle(${1:ref}, () => ({", "\t$0", "})${2:, [$3]})"],
    "description": "use imperative handle hooks"
  },
  "UseLayoutEffectHook": {
    "prefix": "rule",
    "body": ["useLayoutEffect(() => {", "\t$0", "}${1:, [$2]})"],
    "description": "use layout effect hooks"
  },
  "UseDebugValueHook": {
    "prefix": "rud",
    "body": ["useDebugValue(${2:value}${1:, (${3:val}) => {$4\\}})"],
    "description": "use debug value hooks"
  }
}
